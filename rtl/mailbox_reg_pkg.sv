// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package mailbox_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } stat;
  } mailbox_reg2hw_irq_snd_stat_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } set;
  } mailbox_reg2hw_irq_snd_set_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clr;
  } mailbox_reg2hw_irq_snd_clr_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } en;
  } mailbox_reg2hw_irq_snd_en_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } stat;
  } mailbox_reg2hw_irq_rcv_stat_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } set;
  } mailbox_reg2hw_irq_rcv_set_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clr;
  } mailbox_reg2hw_irq_rcv_clr_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } en;
  } mailbox_reg2hw_irq_rcv_en_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } stat;
  } mailbox_hw2reg_irq_snd_stat_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } stat;
  } mailbox_hw2reg_irq_rcv_stat_reg_t;

  // Register -> HW type
  typedef struct packed {
    mailbox_reg2hw_irq_snd_stat_reg_t irq_snd_stat; // [11:11]
    mailbox_reg2hw_irq_snd_set_reg_t irq_snd_set; // [10:9]
    mailbox_reg2hw_irq_snd_clr_reg_t irq_snd_clr; // [8:7]
    mailbox_reg2hw_irq_snd_en_reg_t irq_snd_en; // [6:6]
    mailbox_reg2hw_irq_rcv_stat_reg_t irq_rcv_stat; // [5:5]
    mailbox_reg2hw_irq_rcv_set_reg_t irq_rcv_set; // [4:3]
    mailbox_reg2hw_irq_rcv_clr_reg_t irq_rcv_clr; // [2:1]
    mailbox_reg2hw_irq_rcv_en_reg_t irq_rcv_en; // [0:0]
  } mailbox_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    mailbox_hw2reg_irq_snd_stat_reg_t irq_snd_stat; // [1:1]
    mailbox_hw2reg_irq_rcv_stat_reg_t irq_rcv_stat; // [0:0]
  } mailbox_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_SND_STAT_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_SND_SET_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_SND_CLR_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_SND_EN_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_RCV_STAT_OFFSET = 8'h 40;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_RCV_SET_OFFSET = 8'h 44;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_RCV_CLR_OFFSET = 8'h 48;
  parameter logic [BlockAw-1:0] MAILBOX_IRQ_RCV_EN_OFFSET = 8'h 4c;
  parameter logic [BlockAw-1:0] MAILBOX_LETTER0_OFFSET = 8'h 80;
  parameter logic [BlockAw-1:0] MAILBOX_LETTER1_OFFSET = 8'h 84;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] MAILBOX_IRQ_SND_STAT_RESVAL = 32'h 0;
  parameter logic [31:0] MAILBOX_IRQ_SND_SET_RESVAL = 32'h 0;
  parameter logic [31:0] MAILBOX_IRQ_SND_CLR_RESVAL = 32'h 0;
  parameter logic [31:0] MAILBOX_IRQ_RCV_STAT_RESVAL = 32'h 0;
  parameter logic [31:0] MAILBOX_IRQ_RCV_SET_RESVAL = 32'h 0;
  parameter logic [31:0] MAILBOX_IRQ_RCV_CLR_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    MAILBOX_IRQ_SND_STAT,
    MAILBOX_IRQ_SND_SET,
    MAILBOX_IRQ_SND_CLR,
    MAILBOX_IRQ_SND_EN,
    MAILBOX_IRQ_RCV_STAT,
    MAILBOX_IRQ_RCV_SET,
    MAILBOX_IRQ_RCV_CLR,
    MAILBOX_IRQ_RCV_EN,
    MAILBOX_LETTER0,
    MAILBOX_LETTER1
  } mailbox_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] MAILBOX_PERMIT [10] = '{
    4'b 1111, // index[0] MAILBOX_IRQ_SND_STAT
    4'b 1111, // index[1] MAILBOX_IRQ_SND_SET
    4'b 1111, // index[2] MAILBOX_IRQ_SND_CLR
    4'b 1111, // index[3] MAILBOX_IRQ_SND_EN
    4'b 1111, // index[4] MAILBOX_IRQ_RCV_STAT
    4'b 1111, // index[5] MAILBOX_IRQ_RCV_SET
    4'b 1111, // index[6] MAILBOX_IRQ_RCV_CLR
    4'b 1111, // index[7] MAILBOX_IRQ_RCV_EN
    4'b 1111, // index[8] MAILBOX_LETTER0
    4'b 1111  // index[9] MAILBOX_LETTER1
  };

endpackage

