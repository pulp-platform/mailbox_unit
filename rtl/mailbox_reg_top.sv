// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module mailbox_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output mailbox_reg_pkg::mailbox_reg2hw_t reg2hw, // Write
  input  mailbox_reg_pkg::mailbox_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import mailbox_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic irq_snd_stat_stat_qs;
  logic irq_snd_stat_stat_re;
  logic [30:0] irq_snd_stat_reserved_qs;
  logic irq_snd_stat_reserved_re;
  logic irq_snd_set_set_wd;
  logic irq_snd_set_set_we;
  logic [30:0] irq_snd_set_reserved_qs;
  logic irq_snd_set_reserved_re;
  logic irq_snd_clr_clr_wd;
  logic irq_snd_clr_clr_we;
  logic [30:0] irq_snd_clr_reserved_qs;
  logic irq_snd_clr_reserved_re;
  logic irq_snd_en_en_qs;
  logic irq_snd_en_en_wd;
  logic irq_snd_en_en_we;
  logic [30:0] irq_snd_en_reserved_qs;
  logic irq_rcv_stat_stat_qs;
  logic irq_rcv_stat_stat_re;
  logic [30:0] irq_rcv_stat_reserved_qs;
  logic irq_rcv_stat_reserved_re;
  logic irq_rcv_set_set_wd;
  logic irq_rcv_set_set_we;
  logic [30:0] irq_rcv_set_reserved_qs;
  logic irq_rcv_set_reserved_re;
  logic irq_rcv_clr_clr_wd;
  logic irq_rcv_clr_clr_we;
  logic [30:0] irq_rcv_clr_reserved_qs;
  logic irq_rcv_clr_reserved_re;
  logic irq_rcv_en_en_qs;
  logic irq_rcv_en_en_wd;
  logic irq_rcv_en_en_we;
  logic [30:0] irq_rcv_en_reserved_qs;
  logic [31:0] letter0_qs;
  logic [31:0] letter0_wd;
  logic letter0_we;
  logic [31:0] letter1_qs;
  logic [31:0] letter1_wd;
  logic letter1_we;

  // Register instances
  // R[irq_snd_stat]: V(True)

  //   F[stat]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_snd_stat_stat (
    .re     (irq_snd_stat_stat_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.irq_snd_stat.stat.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.irq_snd_stat.stat.q ),
    .qs     (irq_snd_stat_stat_qs)
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_snd_stat_reserved (
    .re     (irq_snd_stat_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_snd_stat_reserved_qs)
  );


  // R[irq_snd_set]: V(True)

  //   F[set]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_snd_set_set (
    .re     (1'b0),
    .we     (irq_snd_set_set_we),
    .wd     (irq_snd_set_set_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.irq_snd_set.set.qe),
    .q      (reg2hw.irq_snd_set.set.q ),
    .qs     ()
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_snd_set_reserved (
    .re     (irq_snd_set_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_snd_set_reserved_qs)
  );


  // R[irq_snd_clr]: V(True)

  //   F[clr]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_snd_clr_clr (
    .re     (1'b0),
    .we     (irq_snd_clr_clr_we),
    .wd     (irq_snd_clr_clr_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.irq_snd_clr.clr.qe),
    .q      (reg2hw.irq_snd_clr.clr.q ),
    .qs     ()
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_snd_clr_reserved (
    .re     (irq_snd_clr_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_snd_clr_reserved_qs)
  );


  // R[irq_snd_en]: V(False)

  //   F[en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_irq_snd_en_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (irq_snd_en_en_we),
    .wd     (irq_snd_en_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.irq_snd_en.en.q ),

    // to register interface (read)
    .qs     (irq_snd_en_en_qs)
  );


  //   F[reserved]: 31:1
  // constant-only read
  assign irq_snd_en_reserved_qs = 31'h0;


  // R[irq_rcv_stat]: V(True)

  //   F[stat]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_rcv_stat_stat (
    .re     (irq_rcv_stat_stat_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.irq_rcv_stat.stat.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.irq_rcv_stat.stat.q ),
    .qs     (irq_rcv_stat_stat_qs)
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_rcv_stat_reserved (
    .re     (irq_rcv_stat_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_rcv_stat_reserved_qs)
  );


  // R[irq_rcv_set]: V(True)

  //   F[set]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_rcv_set_set (
    .re     (1'b0),
    .we     (irq_rcv_set_set_we),
    .wd     (irq_rcv_set_set_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.irq_rcv_set.set.qe),
    .q      (reg2hw.irq_rcv_set.set.q ),
    .qs     ()
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_rcv_set_reserved (
    .re     (irq_rcv_set_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_rcv_set_reserved_qs)
  );


  // R[irq_rcv_clr]: V(True)

  //   F[clr]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_irq_rcv_clr_clr (
    .re     (1'b0),
    .we     (irq_rcv_clr_clr_we),
    .wd     (irq_rcv_clr_clr_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.irq_rcv_clr.clr.qe),
    .q      (reg2hw.irq_rcv_clr.clr.q ),
    .qs     ()
  );


  //   F[reserved]: 31:1
  prim_subreg_ext #(
    .DW    (31)
  ) u_irq_rcv_clr_reserved (
    .re     (irq_rcv_clr_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      ('0),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (irq_rcv_clr_reserved_qs)
  );


  // R[irq_rcv_en]: V(False)

  //   F[en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_irq_rcv_en_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (irq_rcv_en_en_we),
    .wd     (irq_rcv_en_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.irq_rcv_en.en.q ),

    // to register interface (read)
    .qs     (irq_rcv_en_en_qs)
  );


  //   F[reserved]: 31:1
  // constant-only read
  assign irq_rcv_en_reserved_qs = 31'h0;


  // R[letter0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_letter0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (letter0_we),
    .wd     (letter0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (letter0_qs)
  );


  // R[letter1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_letter1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (letter1_we),
    .wd     (letter1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (letter1_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MAILBOX_IRQ_SND_STAT_OFFSET);
    addr_hit[1] = (reg_addr == MAILBOX_IRQ_SND_SET_OFFSET);
    addr_hit[2] = (reg_addr == MAILBOX_IRQ_SND_CLR_OFFSET);
    addr_hit[3] = (reg_addr == MAILBOX_IRQ_SND_EN_OFFSET);
    addr_hit[4] = (reg_addr == MAILBOX_IRQ_RCV_STAT_OFFSET);
    addr_hit[5] = (reg_addr == MAILBOX_IRQ_RCV_SET_OFFSET);
    addr_hit[6] = (reg_addr == MAILBOX_IRQ_RCV_CLR_OFFSET);
    addr_hit[7] = (reg_addr == MAILBOX_IRQ_RCV_EN_OFFSET);
    addr_hit[8] = (reg_addr == MAILBOX_LETTER0_OFFSET);
    addr_hit[9] = (reg_addr == MAILBOX_LETTER1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(MAILBOX_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(MAILBOX_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(MAILBOX_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(MAILBOX_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(MAILBOX_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(MAILBOX_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(MAILBOX_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(MAILBOX_PERMIT[7] & ~reg_be))) |
               (addr_hit[8] & (|(MAILBOX_PERMIT[8] & ~reg_be))) |
               (addr_hit[9] & (|(MAILBOX_PERMIT[9] & ~reg_be)))));
  end

  assign irq_snd_stat_stat_re = addr_hit[0] & reg_re & !reg_error;

  assign irq_snd_stat_reserved_re = addr_hit[0] & reg_re & !reg_error;

  assign irq_snd_set_set_we = addr_hit[1] & reg_we & !reg_error;
  assign irq_snd_set_set_wd = reg_wdata[0];

  assign irq_snd_set_reserved_re = addr_hit[1] & reg_re & !reg_error;

  assign irq_snd_clr_clr_we = addr_hit[2] & reg_we & !reg_error;
  assign irq_snd_clr_clr_wd = reg_wdata[0];

  assign irq_snd_clr_reserved_re = addr_hit[2] & reg_re & !reg_error;

  assign irq_snd_en_en_we = addr_hit[3] & reg_we & !reg_error;
  assign irq_snd_en_en_wd = reg_wdata[0];

  assign irq_rcv_stat_stat_re = addr_hit[4] & reg_re & !reg_error;

  assign irq_rcv_stat_reserved_re = addr_hit[4] & reg_re & !reg_error;

  assign irq_rcv_set_set_we = addr_hit[5] & reg_we & !reg_error;
  assign irq_rcv_set_set_wd = reg_wdata[0];

  assign irq_rcv_set_reserved_re = addr_hit[5] & reg_re & !reg_error;

  assign irq_rcv_clr_clr_we = addr_hit[6] & reg_we & !reg_error;
  assign irq_rcv_clr_clr_wd = reg_wdata[0];

  assign irq_rcv_clr_reserved_re = addr_hit[6] & reg_re & !reg_error;

  assign irq_rcv_en_en_we = addr_hit[7] & reg_we & !reg_error;
  assign irq_rcv_en_en_wd = reg_wdata[0];

  assign letter0_we = addr_hit[8] & reg_we & !reg_error;
  assign letter0_wd = reg_wdata[31:0];

  assign letter1_we = addr_hit[9] & reg_we & !reg_error;
  assign letter1_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = irq_snd_stat_stat_qs;
        reg_rdata_next[31:1] = irq_snd_stat_reserved_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[31:1] = irq_snd_set_reserved_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[31:1] = irq_snd_clr_reserved_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = irq_snd_en_en_qs;
        reg_rdata_next[31:1] = irq_snd_en_reserved_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = irq_rcv_stat_stat_qs;
        reg_rdata_next[31:1] = irq_rcv_stat_reserved_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[31:1] = irq_rcv_set_reserved_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[31:1] = irq_rcv_clr_reserved_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = irq_rcv_en_en_qs;
        reg_rdata_next[31:1] = irq_rcv_en_reserved_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = letter0_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = letter1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
